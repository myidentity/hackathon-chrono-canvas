{"version":3,"file":"ImagesPanel-64fcfb89.js","sources":["../../src/components/ElementLibrary/ImagesPanel.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useImageLibrary } from '../../context/ImageLibraryContext';\nimport './MediaPanel.css'; // Reusing the existing CSS for now\n\ninterface ImagesPanelProps {\n  onSelectImage: (image: any) => void;\n}\n\nconst ImagesPanel: React.FC<ImagesPanelProps> = ({ onSelectImage }) => {\n  const { images, addImage } = useImageLibrary();\n  const [sampleImage, setSampleImage] = useState<any>(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  useEffect(() => {\n    // Set up sample image\n    setSampleImage({\n      src: '/images/sample-landscape.jpg',\n      name: 'Sample Landscape',\n      alt: 'Beautiful landscape scene'\n    });\n  }, []);\n\n  const handleImageClick = (image: any) => {\n    // Ensure src is explicitly included in properties to prevent it from being lost\n    onSelectImage({ \n      type: 'image', \n      ...image,\n      properties: {\n        src: image.src,\n        alt: image.alt || '',\n        name: image.name || 'Image'\n      }\n    });\n  };\n\n  // Handle file drop for image upload\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    files.forEach(file => {\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          const imageUrl = event.target?.result as string;\n          \n          // Cache the image in localStorage\n          try {\n            const imageKey = `chrono-canvas-image-${Date.now()}`;\n            localStorage.setItem(imageKey, imageUrl);\n            \n            // Add to image library\n            addImage({\n              src: imageUrl,\n              name: file.name,\n              alt: file.name,\n              thumbnail: imageUrl,\n              isUserUploaded: true\n            });\n          } catch (error) {\n            console.error('Error caching image:', error);\n          }\n        };\n        reader.readAsDataURL(file);\n      }\n    });\n  }, [addImage]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  return (\n    <div \n      className=\"media-panel\"\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n    >\n      <h3>Images</h3>\n      \n      {/* Drop zone indicator */}\n      {isDragging && (\n        <div className=\"drop-zone\">\n          <div className=\"drop-zone-message\">\n            Drop images here\n          </div>\n        </div>\n      )}\n      \n      <div className=\"media-grid\">\n        {/* Display sample image */}\n        {sampleImage && (\n          <div \n            key=\"sample-image\" \n            className=\"media-item image-item\"\n            onClick={() => handleImageClick(sampleImage)}\n            title={sampleImage.name || \"\"}\n          >\n            <img src={sampleImage.src} alt={sampleImage.alt} />\n          </div>\n        )}\n        \n        {/* Display user-added images */}\n        {images.map((image, index) => (\n          <div \n            key={`image-${index}`} \n            className=\"media-item image-item\"\n            onClick={() => handleImageClick(image)}\n            title={image.name || \"\"}\n          >\n            <img src={image.src} alt=\"\" />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ImagesPanel;\n"],"names":["ImagesPanel","onSelectImage","images","addImage","useImageLibrary","sampleImage","setSampleImage","useState","isDragging","setIsDragging","useEffect","src","name","alt","handleImageClick","image","type","properties","handleDrop","useCallback","e","preventDefault","Array","from","dataTransfer","files","forEach","file","startsWith","reader","FileReader","onload","event","imageUrl","_a","target","result","imageKey","Date","now","localStorage","setItem","thumbnail","isUserUploaded","error","readAsDataURL","handleDragOver","handleDragLeave","jsxRuntimeExports","jsxs","className","onDrop","onDragOver","onDragLeave","children","jsx","onClick","title","map","index"],"mappings":"4DAQMA,EAA0C,EAAGC,oBACjD,MAAMC,OAAEA,EAAAC,SAAQA,GAAaC,KACtBC,EAAaC,GAAkBC,WAAc,OAC7CC,EAAYC,GAAiBF,YAAS,GAE7CG,EAAAA,WAAU,KAEOJ,EAAA,CACbK,IAAK,+BACLC,KAAM,mBACNC,IAAK,6BACN,GACA,IAEG,MAAAC,EAAoBC,IAEVd,EAAA,CACZe,KAAM,WACHD,EACHE,WAAY,CACVN,IAAKI,EAAMJ,IACXE,IAAKE,EAAMF,KAAO,GAClBD,KAAMG,EAAMH,MAAQ,UAEvB,EAIGM,EAAaC,eAAaC,IAC9BA,EAAEC,iBACFZ,GAAc,GAEAa,MAAMC,KAAKH,EAAEI,aAAaC,OAClCC,SAAgBC,IACpB,GAAIA,EAAKX,KAAKY,WAAW,UAAW,CAC5B,MAAAC,EAAS,IAAIC,WACZD,EAAAE,OAAUC,UACT,MAAAC,EAAW,OAAAC,EAAMF,EAAAG,aAAQ,EAAAD,EAAAE,OAG3B,IACF,MAAMC,EAAW,uBAAuBC,KAAKC,QAChCC,aAAAC,QAAQJ,EAAUJ,GAGtB9B,EAAA,CACPQ,IAAKsB,EACLrB,KAAMe,EAAKf,KACXC,IAAKc,EAAKf,KACV8B,UAAWT,EACXU,gBAAgB,UAEXC,GAET,GAEFf,EAAOgB,cAAclB,EACvB,IACD,GACA,CAACxB,IAEE2C,EAAiB3B,eAAaC,IAClCA,EAAEC,iBACFZ,GAAc,EAAI,GACjB,IAEGsC,EAAkB5B,EAAAA,aAAY,KAClCV,GAAc,EAAK,GAClB,IAGD,OAAAuC,EAAAC,KAAC,MAAA,CACCC,UAAU,cACVC,OAAQjC,EACRkC,WAAYN,EACZO,YAAaN,EAEbO,SAAA,GAAAC,IAAC,MAAGD,SAAM,WAGT9C,GACEwC,EAAAO,IAAA,MAAA,CAAIL,UAAU,YACbI,eAAC,MAAI,CAAAJ,UAAU,oBAAoBI,SAAA,yBAMvCL,KAAC,MAAI,CAAAC,UAAU,aAEZI,SAAA,CACCjD,GAAA2C,EAAAO,IAAC,MAAA,CAECL,UAAU,wBACVM,QAAS,IAAM1C,EAAiBT,GAChCoD,MAAOpD,EAAYO,MAAQ,GAE3B0C,eAAC,MAAI,CAAA3C,IAAKN,EAAYM,IAAKE,IAAKR,EAAYQ,OALxC,gBAUPX,EAAOwD,KAAI,CAAC3C,EAAO4C,IAClBX,EAAAO,IAAC,MAAA,CAECL,UAAU,wBACVM,QAAS,IAAM1C,EAAiBC,GAChC0C,MAAO1C,EAAMH,MAAQ,GAErB0C,eAAC,MAAI,CAAA3C,IAAKI,EAAMJ,IAAKE,IAAI,MALpB,SAAS8C,YAQpB"}